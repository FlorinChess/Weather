# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
name: Deploy Weather WPF Windows 10 Self-Contained

on:
  push:
    branches: [ "master" ]
    tags:
      -"Weather v*"

env:
  Project_Path: Weather\Weather.csproj                     
  Test_Project_Path: Weather.Core.Tests\Weather.Core.Tests.csproj

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest
          
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Execute unit tests
      run: dotnet test

    - name: Restore the application
      run: dotnet restore ${{ env.Project_Path }}

    - name: Build the application
      run: dotnet build ${{ env.Project_Path }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
      
    - uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        
    - uses: csexton/release-asset-action@v2
      with:
        github_token: ${{ env.GITHUB_TOKEN }}
        pattern: Weather\bin\Release\net5.0-windows10.0.22000.0\win-x64\publish\*.exe
        release-url: ${{ steps.crete_release.ouputs.upload_url }}
        
